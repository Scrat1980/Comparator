<?php

namespace app\records;

use app\audit\AuditBehavior;
use Yii;
use yii\behaviors\TimestampBehavior;
use yii\helpers\ArrayHelper;

/**
 * This is the model class for table "mass_order_discount".
 *
 * @property int $id
 * @property int $user_id
 * @property string $account
 * @property int $market_id
 * @property string $external_number
 * @property float $discount
 * @property float $delivery_cost_usd
 * @property int $created_at
 *
 * @property MassOrderProduct $massOrderProduct
 */
class MassOrderDiscount extends \yii\db\ActiveRecord
{

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'mass_order_discount';
    }

    /**
     * @inheritdoc
     * @return MassOrderDiscountQuery
     */
    public static function find()
    {
        return new MassOrderDiscountQuery(get_called_class());
    }

    /**
     * @return array
     */
    public function behaviors()
    {
        return [
            'timestamp' => [
                'class' => TimestampBehavior::class,
                'attributes' => [
                    self::EVENT_BEFORE_INSERT => 'created_at',
                ],
            ],
//            'audit' => AuditBehavior::class,
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['user_id', 'market_id', 'discount', 'external_number'], 'required'],
            [['user_id', 'market_id', 'created_at'], 'integer'],
            [['external_number', 'account'], 'string'],
            [['discount', 'delivery_cost_usd'], 'number'],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'user_id' => 'Администратор',
            'account' => 'Аккаунт выкупа',
            'market_id' => 'Маркет',
            'external_number' => 'Номер заказа в магазине',
            'discount' => 'Скидка',
            'delivery_cost_usd' => 'Доставка',
            'created_at' => 'Создано',
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getMassOrderProduct()
    {
        return $this->hasMany(MassOrderProduct::class, ['mass_order_discount_id' => 'id']);
    }

    public function afterSave($insert, $changedAttributes)
    {
        if (isset($changedAttributes['external_number'])) {
            $this->changeExtNumberOrderPackage();
        }
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    protected function changeExtNumberOrderPackage()
    {
        $massOrderProducts = $this->getMassOrderProduct()->all();
        $packages = [];
        /* @var MassOrderProduct $massOrderProduct */
        foreach ($massOrderProducts as $massOrderProduct){
            $packages[] = $massOrderProduct->orderProduct->orderPackage->id;
        }
        $packages = array_unique($packages);
        if(count($packages) > 0){
            $query = sprintf("UPDATE order_package SET external_order_id = '%s' WHERE id in (%s);", $this->external_number, implode(', ', $packages));
            $res = Yii::$app->db->createCommand($query)->execute();
        }
    }

    /**
     * @return bool
     */
    public function checkAwaitingArriving()
    {
        $exist = Yii::$app->db->createCommand(
            'SELECT 1 FROM order_package WHERE external_order_id = :external_number AND status < :status AND EXISTS ( SELECT 1 FROM order_package_product WHERE order_package_product.order_package_id = order_package.id ) LIMIT 1',
            [
                ':external_number' => $this->external_number,
                ':status'          => OrderPackage::STATUS_ERROR_NOT_REDEEMED
            ]
        )->queryScalar();

        return $exist === false;
    }

    /**
     * @return OrderProductQuery|\yii\db\ActiveQuery
     */
    public function getActualOrderProduct()
    {
        return OrderProduct::find()
            ->innerJoinWith('orderPackage')
            ->where(['op.external_order_id' => $this->external_number]);
    }

    public function getActualOrderProductCheckTracking()
    {
        $result = Yii::$app->db->createCommand('select op.status, sum(opr.quantity) quantity, count(opr.id) count from order_product opr
                                                     inner join order_package_product opp on opp.order_product_id = opr.id
                                                     inner join order_package op on op.id = opp.order_package_id
                                                     where op.external_order_id = "' . $this->external_number . '"
                                                     group by op.status')->queryAll();

        return $result;
    }

    public function getSeparatedOrderProduct()
    {
        $moProduct = MassOrderProduct::find()->where(['mass_order_discount_id' => $this->id])->asArray()->all();
        $orderId = array_unique(ArrayHelper::getColumn($moProduct, 'order_id'));

        return OrderProduct::find()
            ->innerJoinWith('orderPackage')
            ->where(['op.external_order_id' => $this->external_number])
            ->andWhere(['op.order_id' => $orderId]);
    }

    /**
     * @return mixed|string
     * @throws \yii\db\Exception
     */
    public function getCountProducts()
    {
        $count = $this->getMassOrderProduct()->select(["SUM(quantity) AS count"])->createCommand()->queryOne();

        if (is_array($count) && isset($count['count'])) {
            return $count['count'];
        }

        return '';
    }

    /**
     * @return float|int
     */
    public function getTotalPrice()
    {
        $massOrderProducts = $this->getMassOrderProduct()->all();

        $totalPrice = 0;
        $totalPriceAll = 0;
        /* @var MassOrderProduct $moProduct */
        foreach ($massOrderProducts as $moProduct) {
            $totalPriceAll += ($moProduct->orderProduct->price_cost_usd * $moProduct->quantity);
            if($moProduct->orderProduct->status != OrderProduct::STATUS_ERROR_NOT_REDEEMED &&
                $moProduct->orderProduct->status != OrderProduct::STATUS_ERROR_NOT_AVAILABLE ) {
                $totalPrice += ($moProduct->orderProduct->price_cost_usd * $moProduct->quantity);
            }
        }

        $totalPriceCheck = $totalPrice + $this->delivery_cost_usd - $this->discount;

        return $totalPriceAll . ' / ' . $totalPrice . ' / ' . $totalPriceCheck;
    }

    public static function getAccountByExternalNumber($externalNumber)
    {
        return MassOrderDiscount::find()->select(['id', 'account'])->where(['external_number' => $externalNumber])->one();
    }

    public function getMassOrderProductsWithTracking()
    {
        return Yii::$app->db->createCommand("SELECT SUM(quantity)
                                                    FROM `mass_order_product` `mop`
                                                    INNER JOIN order_package_product opp ON opp.order_product_id = mop.order_product_id
                                                    INNER JOIN `order_package` `op` ON opp.`order_package_id` = `op`.`id`
                                                    WHERE `mass_order_discount_id` = :mass_order_discount_id
                                                    AND op.tracking_number IS NOT NULL
                                                    AND op.tracking_number != ''
                                                    AND op.status = 8", ['mass_order_discount_id' => $this->id])->queryScalar();

    }

    public static function getLastId($marketId)
    {
        $result = self::find()->select('id')->where(['market_id' => $marketId])->orderBy('id DESC')->asArray()->one();
        return $result['id'] ?? '';
    }

    public static function getCustomExtNumber($marketId)
    {
        $market = \Yii::$app->markets->one($marketId);
        $extNumber = '';
        if (method_exists($market, 'getExtNumber')) {
            $extNumber = $market->getExtNumber() . self::getLastId($marketId);
        }
        return $extNumber;
    }
}
